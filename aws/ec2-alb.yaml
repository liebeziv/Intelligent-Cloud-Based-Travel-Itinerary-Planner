AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 + ALB for FastAPI backend (Docker). Health check; minimal IAM for S3/DynamoDB/Secrets/Logs. 
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to use
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Two public subnets in different AZs (for ALB & ASG)
  ContainerImage:
    Type: String
    Default: "849354442724.dkr.ecr.us-east-1.amazonaws.com/travel-planner-backend:latest"
    Description: Container image URI (ECR or public registry) for the backend
  InstanceType:
    Type: String
    Default: "t3.micro"
    AllowedValues: ["t3.nano","t3.micro","t3.small","t3a.nano","t3a.micro","t3a.small"]
  AppPort:
    Type: Number
    Default: 8000
  DdbUsersTable:
    Type: String
    Default: "travel-planner-users-849354442724"
    Description: DynamoDB table for user profiles
  DdbItinsTable:
    Type: String
    Default: "travel-planner-itineraries-849354442724"
    Description: DynamoDB table for itineraries
  HealthCheckPath:
    Type: String
    Default: "/health"
  MinSize:
    Type: Number
    Default: 1
  DesiredCapacity:
    Type: Number
    Default: 1
  MaxSize:
    Type: Number
    Default: 2
  AmiIdParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"
  ResourcePrefix:
    Type: String
    Default: "travelplanbackend"
    AllowedPattern: "[a-zA-Z0-9-]+"
    Description: Prefix used when naming AWS resources created by this stack
  EnvironmentName:
    Type: String
    Default: "Travelplanbackend-env"
    Description: Logical environment name applied as a tag
  AssetsBucketName:
    Type: String
    Default: "travel-planner-assets-849354442724-lz"
    Description: Existing S3 bucket that stores uploaded assets
  LogGroupName:
    Type: String
    Default: "/aws/ec2/travel-planner-backend-849354442724"
    Description: CloudWatch Logs group for container stdout/stderr

Resources:
  # ---------- IAM ----------
  BackendRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}-ec2-role-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: !Sub "${ResourcePrefix}-inline"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # ECR permissions (only used when pulling from private ECR repositories)
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"
              # DynamoDB minimal access
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DdbUsersTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DdbItinsTable}"
              # S3 uploads/reads for user-uploads prefix in Assets bucket
              - Effect: Allow
                Action: ["s3:PutObject","s3:GetObject"]
                Resource:
                  - !Sub "arn:aws:s3:::${AssetsBucketName}/user-uploads/*"
              # Secrets Manager read
              - Effect: Allow
                Action: ["secretsmanager:GetSecretValue"]
                Resource: "*"
              # CloudWatch Logs
              - Effect: Allow
                Action: ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]
                Resource: "*"

  BackendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref BackendRole ]
      Path: /
      InstanceProfileName: !Sub "${ResourcePrefix}-ec2-instance-profile-${AWS::AccountId}"

  # ---------- Security groups ----------
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG (allow 80 from internet)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0 }
      SecurityGroupEgress:
        - { IpProtocol: -1, FromPort: 0, ToPort: 0, CidrIp: 0.0.0.0/0 }
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-alb-sg"
        - Key: Environment
          Value: !Ref EnvironmentName

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App SG (allow AppPort from ALB SG)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      SecurityGroupEgress:
        - { IpProtocol: -1, FromPort: 0, ToPort: 0, CidrIp: 0.0.0.0/0 }
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-app-sg"
        - Key: Environment
          Value: !Ref EnvironmentName

  # ---------- ALB ----------
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ResourcePrefix}-tg"
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: !Ref AppPort
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      Matcher: { HttpCode: '200-399' }
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-tg"
        - Key: Environment
          Value: !Ref EnvironmentName

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ResourcePrefix}-alb"
      Scheme: internet-facing
      Type: application
      Subnets: !Ref PublicSubnets
      SecurityGroups: [ !Ref AlbSecurityGroup ]
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-alb"
        - Key: Environment
          Value: !Ref EnvironmentName

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ---------- Logs ----------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: 14
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # ---------- Launch Template / ASG ----------
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ResourcePrefix}-lt-${AWS::AccountId}"
      LaunchTemplateData:
        IamInstanceProfile: { Name: !Ref BackendInstanceProfile }
        ImageId: !Ref AmiIdParam
        InstanceType: !Ref InstanceType
        SecurityGroupIds: [ !Ref AppSecurityGroup ]
        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -euo pipefail

            if command -v dnf >/dev/null 2>&1; then
              PKG=dnf
            elif command -v yum >/dev/null 2>&1; then
              PKG=yum
            else
              PKG=microdnf
            fi

            $PKG -y install docker awscli jq || true
            systemctl enable --now docker

            REGION=${AWS::Region}
            ASSETS_BUCKET="${AssetsBucketName}"
            DDB_USERS="${DdbUsersTable}"
            DDB_ITINS="${DdbItinsTable}"
            IMAGE="${ContainerImage}"
            LOG_GROUP="${LogGroupName}"

            if [[ "$IMAGE" == *.dkr.ecr.*amazonaws.com* ]]; then
              REGISTRY="$\{IMAGE%%/*\}"
              aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$REGISTRY"
            fi

            docker pull "$IMAGE"
            docker rm -f app || true
            docker run -d --name app -p ${AppPort}:${AppPort} \
              --log-driver awslogs \
              --log-opt awslogs-group="$LOG_GROUP" \
              --log-opt awslogs-region="$REGION" \
              --log-opt awslogs-stream=app \
              -e AWS_REGION="$REGION" \
              -e ASSETS_BUCKET="$ASSETS_BUCKET" \
              -e DDB_USERS_TABLE="$DDB_USERS" \
              -e DDB_ITINS_TABLE="$DDB_ITINS" \
              "$IMAGE"

  AutoScalingGroup:
    DependsOn: LogGroup
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnets
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs: [ !Ref TargetGroup ]
      HealthCheckType: ELB
      HealthCheckGracePeriod: 180
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-ec2"
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true

Outputs:
  AlbDNSName:
    Description: Public URL for backend (HTTP)
    Value: !GetAtt ALB.DNSName
    Export:
      Name: travel-planner-backend-AlbDNSName
  AlbArn:
    Description: ARN of the application load balancer
    Value: !GetAtt ALB.LoadBalancerArn
    Export:
      Name: travel-planner-backend-AlbArn
  AlbFullName:
    Description: CloudWatch dimension value for the ALB
    Value: !GetAtt ALB.LoadBalancerFullName
    Export:
      Name: travel-planner-backend-AlbFullName
  TargetGroupArn:
    Description: Target group ARN
    Value: !Ref TargetGroup
    Export:
      Name: travel-planner-backend-TargetGroupArn
  TargetGroupFullName:
    Description: CloudWatch dimension value for the target group
    Value: !GetAtt TargetGroup.TargetGroupFullName
    Export:
      Name: travel-planner-backend-TargetGroupFullName
  InstanceRoleName:
    Description: EC2 instance role name
    Value: !Ref BackendRole
    Export:
      Name: travel-planner-backend-InstanceRoleName
  LogGroup:
    Description: CloudWatch Logs group receiving container output
    Value: !Ref LogGroupName
    Export:
      Name: travel-planner-backend-LogGroupName
  AutoScalingGroupName:
    Description: Auto Scaling group managing the backend instances
    Value: !Ref AutoScalingGroup
    Export:
      Name: travel-planner-backend-AutoScalingGroupName
