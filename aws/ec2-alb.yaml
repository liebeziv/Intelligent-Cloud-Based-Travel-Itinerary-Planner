AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 + ALB for FastAPI backend (Docker). Health check; minimal IAM for S3/DynamoDB/Secrets/Logs. 

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to use
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Two public subnets in different AZs (for ALB & ASG)
  ContainerImage:
    Type: String
    Default: "your-image:latest"   # need to change to docker imageï¼Œsuch as  docker.io/namespace/image:tag
    Description: Public container image (Docker Hub/GHCR/etc)
  InstanceType:
    Type: String
    Default: "t3.micro"
    AllowedValues: ["t3.nano","t3.micro","t3.small","t3a.nano","t3a.micro","t3a.small"]
  AppPort:
    Type: Number
    Default: 8000
  DdbUsersTable:
    Type: String
    Default: "Users"
  DdbItinsTable:
    Type: String
    Default: "Itineraries"
  HealthCheckPath:
    Type: String
    Default: "/health"
  MinSize:
    Type: Number
    Default: 0
  DesiredCapacity:
    Type: Number
    Default: 0
  MaxSize:
    Type: Number
    Default: 1
  AmiIdParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

Resources:
  # ---------- IAM ----------
  BackendRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "trip-planner-backend-role-v5-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: trip-planner-backend-inline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB minimal access
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DdbUsersTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DdbItinsTable}"
              # S3 uploads/reads for user-uploads prefix in Assets bucket
              - Effect: Allow
                Action: ["s3:PutObject","s3:GetObject"]
                Resource: !Sub "arn:aws:s3:::travel-planner-assets-${AWS::AccountId}/user-uploads/*"
              # Secrets Manager read (narrow later gainning ARN)
              - Effect: Allow
                Action: ["secretsmanager:GetSecretValue"]
                Resource: "*"
              # CloudWatch Logs
              - Effect: Allow
                Action: ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]
                Resource: "*"

  BackendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref BackendRole ]
      Path: /
      InstanceProfileName: !Sub "trip-planner-backend-instance-profile-v5-${AWS::AccountId}"

  # ---------- SG ----------
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG (allow 80 from internet)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0 }
      SecurityGroupEgress:
        - { IpProtocol: -1, FromPort: 0, ToPort: 0, CidrIp: 0.0.0.0/0 }

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App SG (allow AppPort from ALB SG)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      SecurityGroupEgress:
        - { IpProtocol: -1, FromPort: 0, ToPort: 0, CidrIp: 0.0.0.0/0 }

  # ---------- ALB ----------
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: !Ref AppPort
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      Matcher: { HttpCode: '200-399' }

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets: !Ref PublicSubnets
      SecurityGroups: [ !Ref AlbSecurityGroup ]

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ---------- Logs ----------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /trip-planner/backend-v5
      RetentionInDays: 14

  # ---------- Launch Template / ASG ----------
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "trip-planner-backend-lt-v5-${AWS::AccountId}"
      LaunchTemplateData:
        IamInstanceProfile: { Name: !Ref BackendInstanceProfile }
        ImageId: !Ref AmiIdParam
        InstanceType: !Ref InstanceType
        SecurityGroupIds: [ !Ref AppSecurityGroup ]
        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -euo pipefail
            PKG=""
            if command -v dnf >/dev/null 2>&1; then PKG=dnf; elif command -v yum >/dev/null 2>&1; then PKG=yum; else PKG=microdnf; fi
            $PKG -y install docker awscli jq || true
            systemctl enable --now docker

            REGION=${AWS::Region}
            ASSETS_BUCKET="travel-planner-assets-${AWS::AccountId}"
            DDB_USERS="${DdbUsersTable}"
            DDB_ITINS="${DdbItinsTable}"
            IMAGE="${ContainerImage}"

            docker pull "$IMAGE" || true
            docker rm -f app || true
            docker run -d --name app -p ${AppPort}:${AppPort} \
              --log-driver awslogs \
              --log-opt awslogs-group=/trip-planner/backend-v3 \
              --log-opt awslogs-region=$REGION \
              --log-opt awslogs-stream=app \
              -e AWS_REGION=$REGION \
              -e ASSETS_BUCKET=$ASSETS_BUCKET \
              -e DDB_USERS_TABLE=$DDB_USERS \
              -e DDB_ITINS_TABLE=$DDB_ITINS \
              "$IMAGE" || true

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnets
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs: [ !Ref TargetGroup ]
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

Outputs:
  AlbDNSName:
    Description: Public URL for backend (HTTP)
    Value: !GetAtt ALB.DNSName
  TargetGroupArn:
    Description: Target group ARN
    Value: !Ref TargetGroup
  InstanceRoleName:
    Description: EC2 instance role name
    Value: !Ref BackendRole
